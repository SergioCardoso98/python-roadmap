A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended
Within a module, the module’s name (as a string) is available as the value of the global variable __name__.

Namespace is like an object mapping in memory 
    a function namespace is a object that has the mapping to the vars inside it, etc..
    the global namespace has also an object mapping that will include the function said above

When I import module_1, Python:
    - Finds the .py file via the path.
    - Reads the file, compiles the code to bytecode.
    - Executes the bytecode to create a module object in memory.
    - Adds that module object to sys.modules (a dictionary of all loaded modules) (also an object).
    - Adds a reference in the current namespace (globals() or wherever it’s imported).

We can see it in the locals - print(locals())
    {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x102528d60>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>, '__file__': '/Users/ctw04025/PersonalLearning/python-roadmap/Modules/main.py', '__cached__': None, 'module_1': <module 'module_1' from '/Users/ctw04025/PersonalLearning/python-roadmap/Modules/module_1.py'>}